{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","id","name","email","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","React","Component","App","onSearchChange","event","searchField","target","value","fetch","then","response","json","users","filterRobot","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"sNAceA,EAZF,SAACC,GACV,OACI,yBAAKC,UAAU,oDACX,yBAAKC,IAAI,QAAQC,IAAG,8BAAyBH,EAAMI,GAA/B,4BACpB,6BACI,4BAAKJ,EAAMK,MACX,2BAAIL,EAAMM,UCSXC,EAdE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAIhB,OACI,6BAEQA,EAAOC,KAAI,SAACC,EAAKC,GACb,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGN,KAAMG,EAAOG,GAAGN,KAAMC,MAAOE,EAAOG,GAAGL,MAAOF,GAAII,EAAOG,GAAGP,UCItFS,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,kBAAC,WAAD,KACI,2BACIb,UAAY,mCACZc,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCXI,EARA,SAAClB,GACf,OACI,yBAAKmB,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAChEtB,EAAMuB,WCgBDC,E,YAlBX,WAAYxB,GAAQ,IAAD,8BACf,4CAAMA,KACDyB,MAAQ,CACTC,UAAU,GAHC,E,+EAODC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAGzB,OAAGG,KAAKJ,MAAMC,SACH,0CAEJG,KAAK7B,MAAMuB,a,GAfCQ,IAAMC,WC+ClBC,E,YAzCX,aAAe,IAAD,8BACV,+CAOJC,eAAiB,SAACC,GACd,EAAKL,SAAS,CAACM,YAAaD,EAAME,OAAOC,SAPzC,EAAKb,MAAQ,CACTjB,OAAQ,GACR4B,YAAa,IAJP,E,iFAYO,IAAD,OAChBG,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKb,SAAS,CAACtB,OAAQmC,S,+BAGnC,IAAD,EACuBd,KAAKJ,MAA3BjB,EADD,EACCA,OAAO4B,EADR,EACQA,YACRQ,EAAcpC,EAAOqC,QAAO,SAAAC,GAC9B,OAAOA,EAAMzC,KAAK0C,cAAcC,SAASZ,EAAYW,kBAGzD,OAAQvC,EAAOyC,OAEX,kBAAC,WAAD,KACQ,yBAAKhD,UAAU,MACX,2CACA,kBAAC,EAAD,CAAWa,aAAce,KAAKK,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU1B,OAAQoC,QAP1C,2C,GA1BUb,IAAMC,WCKJkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD0H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLsC,QAAQtC,MAAMA,EAAMuC,a","file":"static/js/main.2c088444.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props) => {\n    return (\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='robot' src={`http://robohash.org/${props.id}?set=set1&size=200x200`} />\n            <div>\n                <h2>{props.name}</h2>\n                <p>{props.email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n// if (true) {\n//     throw new Error('NOOOO')\n// }\n    return (\n        <div>\n            {\n                robots.map((user,i) => {\n                    return <Card key={i} name={robots[i].name} email={robots[i].email} id={robots[i].id} />\n                })\n            }\n        </div>        \n    );\n}\nexport default CardList;","import React, { Fragment } from 'react';\n\nconst SearchBox = ({searchChange}) => {\n    return (\n        <Fragment>\n            <input\n                className = 'pa3 ba b--green bg-lightest-blue' \n                type='search' \n                placeholder='search robots'\n                onChange={searchChange} \n            />\n        </Fragment>\n    )\n}\n\nexport default SearchBox","import React from 'react';\n\nconst Scroll = (props) => {\n return (\n     <div style={{overflowY: 'scroll', border: '1px solid black', height: \"500px\"}}>\n         {props.children}\n     </div>\n )\n}\n\nexport default Scroll","import React from 'react';\n\nclass ErrorBoundry extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({hasError: true})\n    }\n    render() {\n        if(this.state.hasError){\n            return <h1>ooops g.g.</h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundry;","import React, {Fragment} from 'react';\nimport CardList from '../components/CardList';\nimport {robots} from '../robots';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\n\nclass App extends React.Component  {\n    constructor() {\n        super()\n        this.state = {\n            robots: [],\n            searchField: '',\n        }\n    }\n\n    onSearchChange = (event) => {\n        this.setState({searchField: event.target.value})\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => response.json())\n            .then(users => this.setState({robots: users}))\n    }\n\n    render () {\n        const {robots,searchField} = this.state;\n        const filterRobot = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        })\n\n        return !robots.length ? \n        <h1>loading</h1> : (\n            <Fragment>\n                    <div className='tc'>\n                        <h1>robofriends</h1>\n                        <SearchBox searchChange={this.onSearchChange}/>\n                        <Scroll>\n                            <ErrorBoundry>\n                                <CardList robots={filterRobot}/>\n                            </ErrorBoundry>\n                        </Scroll>\n                    </div>\n                </Fragment>\n        )\n    }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import Card from './Card.js';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n// import {robots} from './robots';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}